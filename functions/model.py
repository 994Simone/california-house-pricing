from sklearn.linear_model import LinearRegressionfrom sklearn.ensemble import RandomForestRegressorfrom sklearn.model_selection import GridSearchCVfrom sklearn.svm import SVC    # %%def calc_lin_regres(dict_input: dict):        reg = LinearRegression()        reg.fit(dict_input['x_train'], dict_input['y_train'])        print(reg.score(dict_input['x_test'], dict_input['y_test']))# %%def calc_lin_regress_scaler(dict_input: dict) -> None:        reg = LinearRegression()        reg.fit(dict_input['x_train_s'], dict_input['y_train'])        print(reg.score(dict_input['x_test_s'], dict_input['y_test']))# %%def calc_random_forest_model(dict_input: dict) -> None:        forest = RandomForestRegressor()        forest.fit(dict_input['x_train_s'], dict_input['y_train'])        print(forest.score(dict_input['x_test_s'], dict_input['y_test']))# %%def calc_best_random_forest_model(dict_input: dict, flag_run: bool) -> None:        if flag_run:        # Re define a fresh forest regressor, so we don't have the fitted version from above        forest = RandomForestRegressor()                # Contains hyperparameter        param_grid = {            'n_estimators': [100, 200, 300],            'min_samples_split': [2, 4],            'max_depth': [None, 4, 8],            'n_jobs': [-1]            }                # Best combination seems to be 300 estimators and default parameters        """        We need a positive score, so the more positive it gets, the better, and        the squared error is the opposite        """        grid_search = GridSearchCV(            forest,            param_grid,            cv=5,            scoring='neg_mean_squared_error',            return_train_score=True)                grid_search.fit(dict_input['x_train_s'], dict_input['y_train'])                # Once grid_search is finished we can see the optimal number of hyperparameters        best_forest = grid_search.best_estimator_                print(best_forest)                print(best_forest.score(dict_input['x_test_s'], dict_input['y_test']))# %%def calc_support_vector_machine_model(dict_input: dict, flag_run: bool) -> None:        if flag_run:                clf = SVC(kernel='linear')                clf.fit(dict_input['x_train_s'], dict_input['y_train'])                print(clf.score(dict_input['x_test_s'], dict_input['y_test']))